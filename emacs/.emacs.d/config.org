#+Title: emacs config
#+AUTHOR:  ehrenschwan

this is my minimal emacs config to make it comfortable for me
like one dark and evil mode 

* vars

these are some defined variables 

#+begin_src emacs-lisp

;; Setting variables relating to one system 
(pcase system-type
  ('gnu/linux
    (message "on linux")	 
    ;; font sizes 
    (defvar ls/default-font-size 110)
    (defvar ls/default-variable-font-size 110))
   
  ('darwin ;; macOs 
    (message "on mac") 
    ;; font sizes 
    (defvar ls/default-font-size 140)
    (defvar ls/default-variable-font-size 140)

    ;; set left option to meta and keep rigth option
    (defvar mac-option-key-is-meta t)
    (defvar mac-right-option-modifier nil)))

;; turn orn utf-8 encoding everywhere
(prefer-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

(setq locale-coding-system 'utf-8)

(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

#+end_src

* keep folders clean

#+begin_src emacs-lisp

(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

;; have the backup files go in a folder named backups in the .emacs.d folder
;; have the auto-save-files go in the /tmp folder
(setq backup-directory-alist
      `(("." . ,(concat user-emacs-directory "backups"))))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+end_src

* server mode
starts the emacs server

#+begin_src emacs-lisp

(server-start)

#+end_src

** shutdown server

#+begin_src emacs-lisp

;; define function to shutdown emacs server instance
(defun server-shutdown ()
  "Save buffers, Quit, and Shutdown (kill) server"
  (interactive)
  (save-some-buffers)
  (kill-emacs))

#+end_src

* basic ui config

#+begin_src emacs-lisp
(setq inhibit-startup-message t)

(scroll-bar-mode -1)   ; disable visible scrollbar
(tool-bar-mode -1)     ; disable the toolbar
(tooltip-mode -1)      ; disable tooltips
(set-fringe-mode 10)	; give some breathing room

(menu-bar-mode -1) 	; disable the menu bar

(column-number-mode)

;; enable line numbers and set them to relative
(global-display-line-numbers-mode)
(setq display-line-numbers-type 'relative)

;; disable line numbers for some modes
(dolist(mode '(org-mode-hook
               term-mode-hook
               shell-mode-hook
               eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** font config
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Fira Code" :height ls/default-font-size)

;; set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height ls/default-font-size)

;;set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height ls/default-variable-font-size :weight 'regular)

(defun ls/set-font-faces ()
  (message "Setting faces!")
  (set-face-attribute 'default nil :font "Fira Code" :height ls/default-font-size)

  ;; set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height ls/default-font-size)

  ;;set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height ls/default-variable-font-size :weight 'regular))

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                     (setq doom-modeline-icon t)
                     (with-selected-frame frame
                     (ls/set-font-faces))))
(ls/set-font-faces))

#+end_src

* keybind config
** esc cancels all

#+begin_src emacs-lisp

;; make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** rebinding C-u
rebinding C-u as it is used by evil 

#+begin_src emacs-lisp

(global-set-key (kbd "C-M-u") 'universal-argument)

#+end_src

** general

#+begin_src emacs-lisp 

(use-package general 
  :config 
  (general-create-definer ls/leader-keys 
    :keymaps '(normal insert visual emacs) 
    :prefix "SPC" 
    :global-prefix "C-SPC") 

  (ls/leader-keys 
    "b" '(:ignore t :which-key "buffer") 
    "bn" '(evil-buffer :which-key "evil-buffer")
    "be" '(previous-buffer :which-key "previous-buffer")
    "bk" '(kill-buffer :which-key "kill-buffer")
    "bh" '(ibuffer :which-key "ibuffer")
    "c" '(:ignore t :which-key "config")
    "cc" '(lambda() (interactive) (find-file (expand-file-name "~/.emacs.d/config.org")) :which-key "open-config")
    "cs" '(shutdown-server :which-key "shutdown-server")
    "f" '(:ignore t :which-key "file")
    "g" '(:ignore t :which-key "magit")
    "m" '(:ignore t :which-Key "mult-cursors")
    "s" '(save-buffer :which-key "save-buffer")
    "t" '(:ignore t :which-key "treemacs")
    "u" '(:ignore t :which-key "utils")
    "ul" '(display-line-numbers-mode :which-key "display-line-numbers-mode")
    "w" '(evil-window-map :which-key "evil-window")))

#+end_src

* evil

#+begin_src emacs-lisp

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-undo-system 'undo-tree)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; key remaps for colemak layout
  (define-key evil-normal-state-map (kbd "C-w n") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-w e") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-w i") 'evil-window-right)
  (define-key evil-normal-state-map (kbd "C-w k") 'evil-window-new)

  ;; use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "n" 'evil-next-visual-line)
  (evil-global-set-key 'motion "e" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal)
  (evil-set-initial-state 'org-mode 'normal))

#+end_src

*** evil-colemak

i use colemak so i use this package to remap the most common evil keymaps

#+begin_src emacs-lisp

(use-package evil-colemak-basics
  :config
  (global-evil-colemak-basics-mode))

#+end_src

*** evil-collection

#+begin_src emacs-lisp

(use-package evil-collection
  :ensure t
  :after evil
  :init
  (evil-collection-init))

#+end_src

*** undo tree

for evil-undo-system to work undo tree needs to be activated globally

#+begin_src emacs-lisp

(use-package undo-tree)

(global-undo-tree-mode)

#+end_src

*** multiple-cursors

#+begin_src emacs-lisp

(use-package evil-mc)

(global-evil-mc-mode  1) ;; enable

(ls/leader-keys
 "mm" '(evil-mc-make-and-goto-next-match :which-key "make cursor and go to next match")
 "mu" '(evil-mc-undo-last-added-cursor :which-key "removes the last cursor")
 "mr" '(evil-mc-undo-all-cursors :which-key "removes all cursors")
 "m<" '(evil-mc-make-cursor-in-visual-selection-beg :which-key "adds cursors to the beginning of all selected lines")
 "m>" '(evil-mc-make-cursor-in-visual-selection-end :which-key "adds cursors to the end of all selected lines"))

#+end_src

* ui config
** command log mode

#+begin_src emacs-lisp

(use-package command-log-mode)

#+end_src

** theme
*** all the icons

Note: the first time you load your configuration on a new machine, you'll need to run the following command interactively so that mode line icons display correctly: 
M-x all-the-icons-install-fonts

#+begin_src emacs-lisp

(use-package all-the-icons)

#+end_src

*** doom-themes

#+begin_src emacs-lisp

(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

#+end_src

*** doom-modeline

#+begin_src emacs-lisp

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

#+end_src

*** rainbow-delimiters

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** which-key

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

** ivy

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-n" . ivy-next-line)
	 ("C-e" . ivy-prevous-line)
	 :map ivy-switch-buffer-map
	 ("C-e" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-e" . ivy-previous-line)
	 ("C-d" . ivy-reverse-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

#+end_src

** counsel

#+begin_src emacs-lisp

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x j" . counsel-switch-buffer)
         ("C-x C-f" . counsel-find-file)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history)))

(ls/leader-keys
  "bb" '(counsel-switch-buffer :which-key "counsel-switch-buffer")
  "bk" '(kill-buffer :which-key "kill-buffer")
  "ff" '(counsel-find-file :which-key "counsel-find-file"))

#+end_src

** helpful

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-varibale-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** text scaling

#+begin_src emacs-lisp

(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("n" text-scale-increase "in")
  ("e" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(ls/leader-keys
  "us" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

* org-mode
** better font faces


#+begin_src emacs-lisp

(defun ls/org-font-setup ()
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; ensures that anything that should be in fixed-pitch in org files appear that way
  (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch))

#+end_src

** basic config

#+begin_src emacs-lisp
(defun ls/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1)
  (org-indent-mode)
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-fontify-natively t))

(use-package org
  :hook (org-mode . ls/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
	org-hide-emphasis-markers t)

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
      '("~/Dropbox/emacs/org/brain.org"
	  "~/Dropbox/emacs/org/calendar.org"
	  "~/.emacs.d/config.org"))

  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")))

  (setq org-refile-targets
	'(("archive.org" :maxlevel . 1)
	  ("brain.org" :maxlevel . 1)))

  ;; save org buffers after refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-capture-templates
    `(("b" "brain")
      ("bt" "TODO" entry (file+olp "~/Dropbox/emacs/org/brain.org" "TODOs")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
      ("bc" "brain construction" entry (file+olp  "~/Dropbox/emacs/org/brain.org" "brain construction site")
           "- %?")))

  (define-key global-map (kbd "C-c c")
    (lambda () (interactive) (org-capture nil)))
  
  (ls/org-font-setup))

#+end_src

*** nicer header bullets

#+begin_src emacs-lisp

(use-package org-bullets
  :after org
  :init
  (add-hook 'org-mode-hook (lambda ()
                             (org-bullets-mode 1)))
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** center org buffers

#+begin_src emacs-lisp

(defun ls/org-mode-visual-fill ()
  (setq visual-fill-column-width 140
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . ls/org-mode-visual-fill))


#+end_src

** config babel langs

#+begin_src emacs-lisp

(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (python . t)))

#+end_src

** structur templates

#+begin_src emacs-lisp

;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** org-gcal

#+begin_src emacs-lisp

;; (setq package-check-signature nil)


;; (use-package org-gcal
;; :ensure t
;; :config
;; (setq org-gcal-client-id "886773733977-4pk98ji1jp22tma0fokhj2efntl1k0um.apps.googleusercontent.com"
;; org-gcal-client-secret "smU0Alm67oRagiF04IzMe1-g"
;; org-gcal-file-alist '(("schwan.luc@gmail.com" .  "~/Dropbox/emacs/org/calendar.org"))))

;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))

#+end_src

** org-tree-slide

#+begin_src emacs-lisp

(use-package org-tree-slide
 :custom
 (org-tree-slide-slide-in-effect t)
 (org-tree-slide-activate-message "Presentation started!")
 (org-tree-slide-deactivate-message "Presentation finished!")
 (org-tree-slide-header t)
 (org-tree-slide-breadcrumbs " > ")
 (org-image-actual-width t))

#+end_src

** yas snippet

#+begin_src emacs-lisp

(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))

#+end_src

* development    
** shell 

#+begin_src emacs-lisp

(setq shell-file-name "/bin/zsh")

#+end_src

*** exec-path-from-shell

#+begin_src emacs-lisp

(use-package exec-path-from-shell)

#+end_src

*** xterm-color

#+begin_src emacs-lisp

(use-package xterm-color)

;; enable xterm colors for compilation
(setq compilation-environment '("TERM=xterm-256color"))

(defun my/advice-compilation-filter (f proc string)
  (funcall f proc (xterm-color-filter string)))

(advice-add 'compilation-filter :around #'my/advice-compilation-filter)

#+end_src

** commenting

#+begin_src emacs-lisp

(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** languages
*** language-server-protocol
**** lsp-mode 

#+begin_src emacs-lisp

(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :bind-keymap
  ("C-l" . lsp-command-map)
  :init
  (electric-pair-mode)
  :config
  (setq lsp-auto-configure t)
  (lsp-enable-which-key-integration t)
  (add-to-list 'lsp-language-id-configuration '(".*\\.hbs$" . "html")))

(setq lsp-enable-links nil)

#+end_src

**** lsp-ui 

#+begin_src emacs-lisp

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

#+begin_src emacs-lisp

(use-package lsp-treemacs
  :after lsp
  :init
  (ls/leader-keys
    "ts" '(lsp-treemacs-symbols :which-key lsp-treemacs-symbols )))
  


#+end_src

**** lsp-ivy

#+begin_src emacs-lisp

(use-package lsp-ivy)

#+end_src

*** dap-mode

#+begin_src emacs-lisp

(use-package dap-mode
  :custom
  (dap-auto-configure-feature '(sessions locals tooltip))
  (dap-ui-mode 1)
  :config
  (require 'dap-node)
  (dap-node-setup)
  (require 'dap-python)
  (general-define-key
  :keymaps 'lsp-mode-map
  :prefix lsp-keymap-prefix
  "d" '(dap-hydra t :wk "debugger")))

#+end_src

*** typescript

#+begin_src emacs-lisp

(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook(typescript-mode . lsp)
  :config
  (setq typescript-indent-level 2)
  (require 'dap-node)
  (dap-node-setup))

#+end_src

*** javascript

#+begin_src emacs-lisp

(use-package js2-mode
  :mode "\\.js\\'"
  :hook(js2-mode . lsp)
  :config
  (setq js-indent-level 2)
  (require 'dap-node)
  (dap-node-setup))

#+end_src

*** JSON

#+begin_src emacs-lisp

(use-package json-mode
  :ensure t
  :config
  (add-hook 'json-mode-hook 'flycheck-mode)
  (setq js-indent-level 2)
  (add-to-list 'auto-mode-alist '("\\.json" . json-mode)))

#+end_src

*** python

#+begin_src emacs-lisp

(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred)
  :custom
  (require 'lsp-python-ms)
  (setq lsp-python-ms-auto-install-server t)
  (dap-python-debugger 'debugpy))

#+end_src

** company mode

#+begin_src emacs-lisp

(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

** flycheck

#+begin_src emacs-lisp

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

#+end_src

** magit

#+begin_src emacs-lisp

(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(ls/leader-keys
  "gg" '(magit-status :which-key "magit-status"))

#+end_src

** projectile

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :config
  (setq projectile-sort-order 'recentf)
  :init
  (when (file-directory-p "~/dev")
    (setq projectile-switch-project-action #'projectile-dired))
  (setq projectile-project-search-path '("~/dev"))
  (ls/leader-keys
    "p" '(projectile-command-map :which-key projectile-command-map)))


(use-package counsel-projectile
  :config (counsel-projectile-mode))


#+end_src

*** project types

#+begin_example emacs-lisp

(projectile-register-project-type 'npm '("package.json")
                                  :project-file "package.json"
				  :compile "npm install"
				  :test "npm test"
				  :run "npm start"
				  :test-suffix ".spec")

#+end_example

** treemacs

#+begin_src emacs-lisp

(use-package treemacs
  :init
  (with-eval-after-load 'treemacs
    (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action))
  (ls/leader-keys
      "tt" '(treemacs :which-key treemacs)
      "ta" '(treemacs-select-window :which-key treemacs-select-window))


(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t)

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

#+end_src>

** electric pair

#+begin_src emacs-lisp

(defun electric-pair ()
     "If at end of line, insert character pair without surrounding spaces.
 Otherwise, just insert the typed character."
     (interactive)
     (if (eolp) (let (parens-require-spaces) (insert-pair)) (self-insert-command 1)))

(add-hook 'lsp-mode-hook
	  (lambda ()
	    (define-key lsp-mode-map "\"" 'electric-pair)
	    (define-key lsp-mode-map "\'" 'electric-pair)
	    (define-key lsp-mode-map "(" 'electric-pair)
	    (define-key lsp-mode-map "[" 'electric-pair)
	    (define-key lsp-mode-map "{" 'electric-pair)))

#+end_src

** web

#+begin_src emacs-lisp

(use-package web-mode
  :ensure t
  :mode (("\\.html?\\'" . web-mode)
         ("\\.tsx\\'" . web-mode)
         ("\\.jsx\\'" . web-mode))
  :hook (web-mode . lsp)
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2
        web-mode-block-padding 2
        web-mode-comment-style 2

        web-mode-enable-css-colorization t
        web-mode-enable-auto-pairing t
        web-mode-enable-comment-keywords t
        web-mode-enable-current-element-highlight t
        )
  (flycheck-add-mode 'typescript-tslint 'web-mode))

  (setq web-mode-enable-auto-closing t)
  (setq web-mode-enable-auto-quoting t)

#+end_src

*** emmet mode

#+begin_src emacs-lisp

(use-package emmet-mode
  :config
  (add-hook 'web-mode-hook 'emmet-mode))

#+end_src

*** tailwind

#+begin_src emacs-lisp

(use-package lsp-tailwindcss)
(add-hook 'before-save-hook 'lsp-tailwindcss-rustywind-before-save)

;; (lsp-register-client
;;  (make-lsp-client :new-connection (lsp-stdio-connection "tailwindcss-language-server --stdio")
;;                   :activation-fn (lsp-activate-on "html")
;;                   :server-id 'lsp-tailwindcss))

#+end_src

** prettier

#+begin_src emacs-lisp

(use-package prettier)
(add-hook 'before-save-hook 'prettier-prettify)
(add-hook 'js2-mode-hook 'prettier-mode)
(add-hook 'typescript-mode-hook 'prettier-mode)
(add-hook 'web-mode-hook 'prettier-mode)

#+end_src

* dired

#+begin_src emacs-lisp

(use-package dired
  :ensure nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "i" 'dired-find-file))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(ls/leader-keys
  "fd" '(dired :which-key "dired")) 
#+end_src
